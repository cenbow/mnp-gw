package org.rtcproject.ws.mnp;

import java.net.URL;
import javax.xml.namespace.QName;
import javax.xml.ws.Service;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceException;
import javax.xml.ws.WebServiceFeature;
import org.rtcproject.ws.RtcProvisioningService;

/**
 * This class was generated by the JAX-WS RI. JAX-WS RI 2.2.8 Generated source
 * version: 2.2
 *
 */
@WebServiceClient(name = "MNP_Service", targetNamespace = "http://rtcproject.org/MNP_WS", wsdlLocation = "MNP_Service.wsdl")
public class RtcProvisioningServiceImpl extends Service implements RtcProvisioningService<RTCWSPortType> {

    private final static URL MNPSERVICE_WSDL_LOCATION;
    private final static WebServiceException MNPSERVICE_EXCEPTION;
    private final static QName MNPSERVICE_QNAME = new QName("http://rtcproject.org/MNP_WS", "MNP_Service");

    static {
        String resourcePath = String.format("../../META-INF/wsdl/MNP_Service.%s.wsdl", System.getProperty("spring.profiles.active"));
        URL url = RtcProvisioningServiceImpl.class.getClassLoader().getResource(resourcePath);
        WebServiceException e = null;
        if (url == null) {
            e = new WebServiceException("Error cannot get resource from " + resourcePath);
        }
        MNPSERVICE_WSDL_LOCATION = url;
        MNPSERVICE_EXCEPTION = e;
    }

    public RtcProvisioningServiceImpl() {
        super(__getWsdlLocation(), MNPSERVICE_QNAME);
    }

    public RtcProvisioningServiceImpl(WebServiceFeature... features) {
        super(__getWsdlLocation(), MNPSERVICE_QNAME, features);
    }

    public RtcProvisioningServiceImpl(URL wsdlLocation) {
        super(wsdlLocation, MNPSERVICE_QNAME);
    }

    public RtcProvisioningServiceImpl(URL wsdlLocation, WebServiceFeature... features) {
        super(wsdlLocation, MNPSERVICE_QNAME, features);
    }

    public RtcProvisioningServiceImpl(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public RtcProvisioningServiceImpl(URL wsdlLocation, QName serviceName, WebServiceFeature... features) {
        super(wsdlLocation, serviceName, features);
    }

    /**
     *
     * @return returns RTCWSPortType
     */
    @WebEndpoint(name = "RTC_WSSOAP_HTTP_Port")
    public RTCWSPortType getRTCWSSOAPHTTPPort() {
        return super.getPort(new QName("http://rtcproject.org/MNP_WS", "RTC_WSSOAP_HTTP_Port"), RTCWSPortType.class);
    }

    /**
     *
     * @param features A list of {@link javax.xml.ws.WebServiceFeature} to
     * configure on the proxy. Supported features not in the
     * <code>features</code> parameter will have their default values.
     * @return returns RTCWSPortType
     */
    @WebEndpoint(name = "RTC_WSSOAP_HTTP_Port")
    public RTCWSPortType getRTCWSSOAPHTTPPort(WebServiceFeature... features) {
        return super.getPort(new QName("http://rtcproject.org/MNP_WS", "RTC_WSSOAP_HTTP_Port"), RTCWSPortType.class, features);
    }

    private static URL __getWsdlLocation() {
        if (MNPSERVICE_EXCEPTION != null) {
            throw MNPSERVICE_EXCEPTION;
        }
        return MNPSERVICE_WSDL_LOCATION;
    }

}
