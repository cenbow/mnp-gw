<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:int="http://www.springframework.org/schema/integration"
       xmlns:int-amqp="http://www.springframework.org/schema/integration/amqp"
       xmlns:int-jdbc="http://www.springframework.org/schema/integration/jdbc"
       xmlns:int-jms="http://www.springframework.org/schema/integration/jms"
       xmlns:int-file="http://www.springframework.org/schema/integration/file"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/integration http://www.springframework.org/schema/integration/spring-integration-4.2.xsd
       http://www.springframework.org/schema/integration/amqp http://www.springframework.org/schema/integration/amqp/spring-integration-amqp.xsd
       http://www.springframework.org/schema/integration/jdbc http://www.springframework.org/schema/integration/jdbc/spring-integration-jdbc-4.2.xsd
       http://www.springframework.org/schema/integration/jms http://www.springframework.org/schema/integration/jms/spring-integration-jms-4.2.xsd
       http://www.springframework.org/schema/integration/file http://www.springframework.org/schema/integration/file/spring-integration-file-4.2.xsd">

    <int-amqp:inbound-channel-adapter
        id="intGwPortActMergerAdapter"
        listener-container="intGwPortActListenerContainer"
        channel="intGwPortActMergerChannel"
        mapped-request-headers="amqp_redelivered,${integration.GwScheduledJobHeaders}"/>
    
    <int:channel id="intGwPortActMergerChannel">
        <int:interceptors>
            <int:ref bean="defaultDelayRedeliveryChannelInterceptor"/>
            <int:wire-tap channel="intGwPortActLoggingChannel"/>
        </int:interceptors>
    </int:channel>
    
    <int:logging-channel-adapter 
        id="intGwPortActLoggingChannel"
        logger-name="cat.mnp.mvno.core.merger.IntGwPortActLogger" level="INFO" 
        expression="'Merging msg ' + headers.MsgId + ' for ' + headers.MvnoName"/>
    
    <int:chain id="intGwPortActMerger"
               input-channel="intGwPortActMergerChannel">
        <!--Query list of PortResp-->
        <int-jdbc:outbound-gateway 
            id="intGwPortActSqlQuery" jdbc-operations="intCatOmJdbcTemplate"
            max-rows-per-poll="0">
            <int-jdbc:query><![CDATA[
                select 
                  s.DONOR
                  ,MNPCAT.MVNO_UTILS.GET_MVNO_NAME_BY_NICKNAME(fs.recipient) RECIPIENT
                  ,o.ORDER_ID
                  ,s.MSISDN
                  ,s.PORT_ID
                  ,to_char(o.SUBMITTED_DATE, 'yyyymmddhh24miss') SUBMISSION_TIME
                  ,m.master_sub_route || s.zone || s.msisdn ROUTE
                  ,s.NUMBER_HOLDER_IND
                  ,case when s.SVC_TYPE = 150 then 'PREPAID' else 'POSTPAID' end SUBTYPE
                from MNP_PI_SVC s
                left join MNP_PI_ORDER o on O.ORDER_ID = s.order_id
                left join INT_PI_FILE_SVC fs on fs.mnp_PI_svc_id = s.id
                left join MNPCAT.MVNO_MASTER_DATA m on m.nickname = fs.recipient
                where 
                  fs.donor = :headers.MvnoName
                  and s.svc_state = 'RECV_NOTIFIED'
                  and s.svc_status = 'COMPLETED'
                  and s.notify_num_app_flag = '11'
                  and s.notify_porting_date >= trunc(to_date(:headers.MsgCreateTimestamp, 'yyyymmddhh24miss')) and s.notify_porting_date < trunc(to_date(:headers.MsgCreateTimestamp, 'yyyymmddhh24miss')) + 1
            ]]></int-jdbc:query>
            <int-jdbc:request-handler-advice-chain>
                <!--Return empty ArrayList instead of throwing error-->
                <ref bean="nullToEmptyListAdvice"/>
            </int-jdbc:request-handler-advice-chain>
        </int-jdbc:outbound-gateway>
        
        <!--Ignore empty list-->
        <int:filter 
            expression="!payload.isEmpty()"
            discard-channel="intNoGwPortActLoggingChannel"/>
        
        <int:recipient-list-router>
            <int:recipient channel="intGwRawPortActPublisherChannel"/>
            <int:recipient channel="intGwSplittedPortActPublisherChannel"/>
        </int:recipient-list-router>
    </int:chain>
    
    <int:logging-channel-adapter 
        id="intNoGwPortActLoggingChannel"
        logger-name="cat.mnp.mvno.core.merger.IntGwPortActLogger" level="INFO" 
        expression="'No msg ' + headers.MsgId + ' for ' + headers.MvnoName"/>
    
    <int:channel id="intGwRawPortActPublisherChannel">
        <int:interceptors>
            <int:wire-tap channel="intGwRawPortActPublisherLoggingChannel"/>
        </int:interceptors>
    </int:channel>
    <int:logging-channel-adapter 
        id="intGwRawPortActPublisherLoggingChannel"
        logger-name="cat.mnp.mvno.core.merger.IntGwPortActLogger" level="INFO" 
        expression="'Publishing raw msg ' + headers.MsgId + ' for ' + headers.MvnoName + ', size: ' + payload.size()"/>
    
    <int:chain id="intGwRawPortActPublisher"
               input-channel="intGwRawPortActPublisherChannel">
        <!--Publish RawPortAct to RabbitMQ-->
        <int-amqp:outbound-channel-adapter
            amqp-template="intGwPortActMergerPublisherRabbitTemplate"
            exchange-name="IntGwRawPortActMsgFanout"
            routing-key-expression="headers.MsgId"
            mapped-request-headers="${integration.GwScheduledJobHeaders}"
            lazy-connect="false"/>
    </int:chain>
    
    <int:channel id="intGwSplittedPortActPublisherChannel">
        <int:interceptors>
            <int:wire-tap channel="intGwSplittedPortActPublisherLoggingChannel"/>
        </int:interceptors>
    </int:channel>
    <int:logging-channel-adapter 
        id="intGwSplittedPortActPublisherLoggingChannel"
        logger-name="cat.mnp.mvno.core.merger.IntGwPortActLogger" level="INFO" 
        expression="'Publishing splitted msg ' + headers.MsgId + ' for ' + headers.MvnoName + ', size: ' + payload.size()"/>
    
    <int:chain id="intGwSplittedPortActPublisher"
               input-channel="intGwSplittedPortActPublisherChannel">
        <!--Split List<Map<String, Object>> to Map<String, Object>-->
        <int:splitter apply-sequence="false"/>
    
        <!--Publish to RabbitMQ-->
        <int-amqp:outbound-channel-adapter
            amqp-template="intGwPortActMergerPublisherRabbitTemplate"
            exchange-name="IntGwPortActMsgFanout"
            routing-key-expression="headers.MsgId"
            mapped-request-headers="${integration.GwScheduledJobHeaders}"
            lazy-connect="false"/>
    </int:chain>
    
</beans>